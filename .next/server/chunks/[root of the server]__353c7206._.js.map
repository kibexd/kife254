{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 180, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/nocki/Documents/GITHUB%20%F0%9F%A7%91%F0%9F%8F%BC%E2%80%8D%F0%9F%92%BB/kife254/app/api/send-email/route.ts"],"sourcesContent":["// This file should be implemented locally\n// Commented out to avoid errors in preview\n\nimport { NextResponse } from 'next/server';\nimport nodemailer from 'nodemailer';\n\nexport async function POST(request: Request) {\n  try {\n    const { name, email, message } = await request.json();\n\n    // Create a transporter using Gmail\n    const transporter = nodemailer.createTransport({\n      service: 'gmail',\n      auth: {\n        user: process.env.EMAIL_USER,\n        pass: process.env.EMAIL_APP_PASSWORD, // Use App Password for Gmail\n      },\n    });\n\n    // Email content\n    const mailOptions = {\n      from: process.env.EMAIL_USER,\n      to: 'kibeenock7390@gmail.com',\n      replyTo: email,\n      subject: `New Contact Form Message from ${name}`,\n      text: `\n        Name: ${name}\n        Email: ${email}\n        \n        Message:\n        ${message}\n      `,\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #e0e0e0; border-radius: 8px;\">\n          <h2 style=\"color: #333; margin-bottom: 20px;\">New Contact Form Message</h2>\n          \n          <div style=\"margin-bottom: 20px;\">\n            <p style=\"margin: 5px 0;\"><strong>Name:</strong> ${name}</p>\n            <p style=\"margin: 5px 0;\"><strong>Email:</strong> ${email}</p>\n          </div>\n          \n          <div style=\"background-color: #f5f5f5; padding: 15px; border-radius: 4px; border-left: 4px solid #333;\">\n            <p style=\"margin: 0;\"><strong>Message:</strong></p>\n            <p style=\"margin: 10px 0; white-space: pre-wrap;\">${message.replace(/\\n/g, '<br>')}</p>\n          </div>\n          \n          <div style=\"margin-top: 20px; font-size: 12px; color: #666;\">\n            <p>This message was sent from your portfolio website contact form.</p>\n          </div>\n        </div>\n      `,\n    };\n\n    // Send email\n    await transporter.sendMail(mailOptions);\n\n    return NextResponse.json({ \n      success: true,\n      message: 'Email sent successfully'\n    });\n  } catch (error) {\n    console.error('Error sending email:', error);\n    return NextResponse.json(\n      { \n        success: false,\n        error: 'Failed to send email',\n        details: error instanceof Error ? error.message : 'Unknown error'\n      },\n      { status: 500 }\n    );\n  }\n}\n\n/*\nimport { NextResponse } from 'next/server';\nimport nodemailer from 'nodemailer';\n\nexport async function POST(request: Request) {\n  try {\n    const { name, email, message, to } = await request.json();\n\n    // Create a transporter\n    const transporter = nodemailer.createTransport({\n      service: 'Yahoo', // or your email service\n      auth: {\n        user: process.env.EMAIL_USER, // set this in your .env file\n        pass: process.env.EMAIL_PASSWORD, // set this in your .env file\n      },\n    });\n\n    // Email content\n    const mailOptions = {\n      from: process.env.EMAIL_USER,\n      to: to || 'kibeenock2024@yahoo.com',\n      subject: `New message from ${name} via Portfolio`,\n      text: `\n        Name: ${name}\n        Email: ${email}\n        \n        Message:\n        ${message}\n      `,\n      html: `\n        <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n          <h2 style=\"color: #333;\">New Contact Form Submission</h2>\n          <p><strong>Name:</strong> ${name}</p>\n          <p><strong>Email:</strong> ${email}</p>\n          <div style=\"margin-top: 20px; padding: 15px; background-color: #f5f5f5; border-left: 4px solid #333;\">\n            <p><strong>Message:</strong></p>\n            <p>${message.replace(/\\n/g, '<br>')}</p>\n          </div>\n        </div>\n      `,\n    };\n\n    // Send email\n    await transporter.sendMail(mailOptions);\n\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error('Error sending email:', error);\n    return NextResponse.json(\n      { error: 'Failed to send email' },\n      { status: 500 }\n    );\n  }\n}\n*/\n"],"names":[],"mappings":"AAAA,0CAA0C;AAC1C,2CAA2C;;;;AAE3C;AACA;;;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,MAAM,QAAQ,IAAI;QAEnD,mCAAmC;QACnC,MAAM,cAAc,iJAAA,CAAA,UAAU,CAAC,eAAe,CAAC;YAC7C,SAAS;YACT,MAAM;gBACJ,MAAM,QAAQ,GAAG,CAAC,UAAU;gBAC5B,MAAM,QAAQ,GAAG,CAAC,kBAAkB;YACtC;QACF;QAEA,gBAAgB;QAChB,MAAM,cAAc;YAClB,MAAM,QAAQ,GAAG,CAAC,UAAU;YAC5B,IAAI;YACJ,SAAS;YACT,SAAS,CAAC,8BAA8B,EAAE,MAAM;YAChD,MAAM,CAAC;cACC,EAAE,KAAK;eACN,EAAE,MAAM;;;QAGf,EAAE,QAAQ;MACZ,CAAC;YACD,MAAM,CAAC;;;;;6DAKgD,EAAE,KAAK;8DACN,EAAE,MAAM;;;;;8DAKR,EAAE,QAAQ,OAAO,CAAC,OAAO,QAAQ;;;;;;;MAOzF,CAAC;QACH;QAEA,aAAa;QACb,MAAM,YAAY,QAAQ,CAAC;QAE3B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;QACX;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YACE,SAAS;YACT,OAAO;YACP,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QACpD,GACA;YAAE,QAAQ;QAAI;IAElB;AACF,EAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA","debugId":null}}]
}